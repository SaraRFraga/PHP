//Hashear Passwords con PASSWORD_BCRYPT: Es uno de los algoritmos de hash más seguros y recomendados para almacenar contraseñas en la actualidad debido a su resistencia a los ataques de fuerza bruta y su capacidad para ajustar el costo computacional a medida que avanza la tecnología.

//BD: Utiliza var char cuando pueda ser una extensión variable de texto, pero utiliza char cuando sea fijo. En el caso de los passwords es fijo y siempre van a ser 60 caracteres utilizando la función de password_hash.

<?php

// Importar la conexión
    require 'includes/config/database.php';
    $db = conectarDB();

// Crear un email y password
    $email = "correo@correo.com";
    $password = "123456";

    $passwordHash = password_hash($password, PASSWORD_BCRYPT);

// Query para crear el usuario
    $query = " INSERT INTO usuarios (email, password) VALUES ( '{$email}', '{$passwordHash}'); ";

// Agregarlo a la base de datos
    mysqli_query($db, $query);


//Es importante tener en cuenta que el hash no se puede revertir para obtener la contraseña original. Por lo tanto, si alguien obtiene acceso a la base de datos de contraseñas de una aplicación web y encuentra los hashes almacenados, no podrá obtener las contraseñas originales a menos que pueda invertir el hash.

//Para aumentar la seguridad de las contraseñas almacenadas, es recomendable utilizar técnicas de "salting" y "stretching" junto con el hash. El "salting" implica agregar una cadena aleatoria de caracteres a la contraseña antes de aplicar el hash, lo que dificulta el proceso de inversión del hash. El "stretching" implica aplicar el hash varias veces en lugar de una sola, lo que también aumenta la seguridad.
